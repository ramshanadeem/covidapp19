{"version":3,"sources":["components/Cards/Card.js","Api.js","components/Charts/Chart.js","components/CountryPicker/Country.js","App.js","serviceWorker.js","index.js","components/Charts/Chart.module.css"],"names":["useStyles","makeStyles","theme","createStyles","root","float","flexWrap","margin","spacing","width","height","SimplePaperCard","data","classes","confirmed","deaths","recovered","lastUpdate","console","log","className","Paper","variant","elevation","component","Card","CardContent","Typography","color","gutterBottom","start","end","value","duration","separator","Date","toDateString","url2","getDailyStatus","a","axios","get","mydaily","map","date","reportDate","total","getCountries","countries","country","name","getAllData","changeableUrl","Chart","useState","daily","setdaily","useEffect","myData","forData","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","borderColor","fill","styles","container","Countries","handleCountryChange","setCountries","fetchAPI","style","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","setState","this","src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.24d846ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport CountUp from 'react-countup';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './Cards.css'\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n  \r\n     float:'left',\r\n      flexWrap: 'wrap',\r\n      '& > *': {\r\n        margin: theme.spacing(2),\r\n        width: theme.spacing(48),\r\n        height: theme.spacing(16),\r\n      },\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function SimplePaperCard({data}) {\r\n  const classes = useStyles();\r\n  const {confirmed,deaths,recovered,lastUpdate} = data;\r\n  console.log(confirmed)\r\nif(!confirmed){\r\n  return 'data is loading...'\r\n}\r\n  return (\r\n    <div className={`${classes.root} card-main`}>\r\n      <Paper variant=\"square\" elevation={4} component='div'>   \r\n       <Card className='card-root1'>\r\n      <CardContent>\r\n        <Typography className='new' color=\"textSecondary\" gutterBottom>\r\n          New Confirmed Cases\r\n        </Typography>\r\n        <Typography className='pos' variant=\"h5\" component=\"h2\">\r\n        <CountUp start={0} end={confirmed.value} duration={2.75} separator=\",\" />\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          Dated: {new Date(lastUpdate).toDateString()}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n</Paper>\r\n      <Paper variant=\"square\" elevation={5} component='div'> \r\n         <Card className='card-root2'>\r\n      <CardContent>\r\n        <Typography className='death' color=\"textSecondary\" gutterBottom>\r\n          New Confirmed Deaths\r\n        </Typography>\r\n        <Typography className='pos' variant=\"h5\" component=\"h2\">\r\n        <CountUp start={0} end={deaths.value} duration={2.75} separator=\",\" />   \r\n        </Typography>\r\n         <Typography variant=\"body2\" component=\"p\">\r\n          Dated: {new Date(lastUpdate).toDateString()}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n</Paper>\r\n      <Paper variant=\"square\" elevation={5} component='div'>   \r\n       <Card className='card-root3'>\r\n      <CardContent>\r\n        <Typography className='rec' color=\"textSecondary\" gutterBottom>\r\n          New Confirmed Recovered\r\n        </Typography>\r\n        <Typography className='pos' variant=\"h5\" component=\"h2\">\r\n        <CountUp start={0} end={recovered.value} duration={2.75} separator=\",\" />        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          Dated: {new Date(lastUpdate).toDateString()}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n</Paper>\r\n    </div>\r\n  );\r\n}","import axios from 'axios'\r\nconst url='https://api.covid19api.com/' \r\nconst url2='https://covid19.mathdro.id/api' \r\n\r\nexport const getData=async ()=>{\r\n    try{\r\n        const res = await axios.get(`${url}/summary`)\r\n        return res\r\n    }\r\n    catch(error){\r\n        console.log(error)\r\n\r\n    }\r\n}\r\nexport const getCountry=async ()=>{\r\n    try{\r\n        const res = await axios.get(`${url}/countries`)\r\n        return res\r\n    }\r\n    catch(error){\r\n        console.log(error)\r\n\r\n    }\r\n}\r\n\r\nexport const getDailyStatus=async ()=>{\r\n    try{\r\n        const { data } = await axios.get(`${url2}/daily`);\r\n  const mydaily = data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }))\r\n  console.log(mydaily)    \r\n  return mydaily;\r\n      }\r\n    catch(error){\r\n        console.log(error)\r\n\r\n    }\r\n}\r\n\r\n  \r\n  export const getCountries = async () => {\r\n    try {\r\n      const { data: { countries } } = await axios.get(`${url2}/countries`);\r\n  \r\n      return countries.map((country) => country.name);\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };\r\n\r\n  export const getAllData = async (country) => {\r\n    let changeableUrl = url2;\r\n  \r\n    if (country) {\r\n      changeableUrl = `${url2}/countries/${country}`;\r\n    }\r\n    try {\r\n      const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n  \r\n      return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  };","import React, {useEffect, useState} from 'react'\r\nimport { Line,Bar } from 'react-chartjs-2';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport {getDailyStatus} from '../../Api';\r\nimport styles from './Chart.module.css'\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n\r\n    const [daily,setdaily]=useState([]);\r\n    useEffect(\r\n      () =>{\r\n       async function forData(){\r\n        const myData = await getDailyStatus();\r\n      \r\n        setdaily(myData)\r\n  \r\n       }\r\n       forData();\r\n      } ,[]\r\n    ); \r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgb(228, 228, 77) ', '#f700ff', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const lineChart = (\r\n    daily[0] ? (\r\n      <Line\r\n        data={{\r\n          labels: daily.map(({ date }) => date),\r\n          datasets: [{\r\n            data: daily.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: 'rgb(228, 228, 77) ',\r\n            fill: true,\r\n          }, {\r\n            data: daily.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return(\r\n        <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n     \r\n       </div>\r\n\r\n    )\r\n}\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { getCountries } from '../../Api';\r\n\r\nimport './Country.css';\r\n\r\nconst Countries = ({ handleCountryChange }) => {\r\n    const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n        setCountries(await getCountries());\r\n      };\r\n    \r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{color:'white'}}>\r\n    <FormControl className='formControl'>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=\"\" >Global</option>\r\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Countries;","import React from 'react';\r\nimport './App.css';\r\nimport {Cards, Chart, Countries} from './components'\r\nimport {getAllData} from './Api'\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: '',\r\n  }  \r\n\r\n  async componentDidMount() {\r\n    const data = await getAllData();\r\n    console.log(data)\r\n    this.setState({ data });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const data = await getAllData(country);\r\n\r\n    this.setState({ data, country: country });\r\n  }\r\n  render(){\r\n    const { data, country } = this.state;\r\n  return (\r\n    <div style={{backgroundColor:'#9dfffc',color:'white'}} className=\"App\">\r\n     \r\n        <img style={{width:'100%',height:'400px'}} src=\"https://image.freepik.com/free-vector/covid-19-coronavirus-outbreak-design-with-virus-blood-cell-microscopic-view-shiny-red-background-2019-ncov-corona-virus-illustration-dangerous-sars-epidemic-theme-banner_1314-2654.jpg\"></img>\r\n            <Countries handleCountryChange={this.handleCountryChange} />\r\n      <Cards data={data} />\r\n      <Chart data={data} country={country} />\r\n      \r\n      </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import SimplePaperCard from './Paper';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__34xv_\"};"],"sourceRoot":""}